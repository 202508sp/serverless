Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ${self:service}-${self:provider.stage}
      Description: 介護ARグラス用APIエンドポイント
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - 'application/octet-stream'
        - 'image/jpeg'
        - 'image/png'
      Tags:
        - Key: Project
          Value: CareARGlass

  ApiGatewayCorsConfiguration:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref ApiGatewayRestApi

  SuccessResponse:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ContentType: application/json
      Description: 成功レスポンス
      Schema:
        type: object
        properties:
          message:
            type: string
          data:
            type: object

  ErrorResponse:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ContentType: application/json
      Description: エラーレスポンス
      Schema:
        type: object
        properties:
          message:
            type: string
          error:
            type: string

  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  CommandHandlerLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: IamRoleLambdaExecution
    Properties:
      FunctionName: ${self:service}-${self:provider.stage}-commandHandler
      Handler: functions/commandHandler.handler
      Runtime: ${self:provider.runtime}
      MemorySize: 1024
      Timeout: 6
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Environment:
        Variables:
          NODE_ENV: ${self:provider.stage}
          PATIENTS_TABLE: ${self:service}-${self:provider.stage}-patients
          VITALS_TABLE: ${self:service}-${self:provider.stage}-vitals
          CARE_RECORDS_TABLE: ${self:service}-${self:provider.stage}-care-records
          DEVICES_TABLE: ${self:service}-${self:provider.stage}-devices
          STAFF_TABLE: ${self:service}-${self:provider.stage}-staff
          FAMILY_ACCESS_TABLE: ${self:service}-${self:provider.stage}-family-access
          GEMINI_API_KEY: ${env:GEMINI_API_KEY}
          GOOGLE_APPLICATION_CREDENTIALS: '${google-credentials.json}'

  ApiGatewayResourceCommand:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'command'

  ApiGatewayMethodCommandPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - ApiGatewayResourceCommand
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceCommand
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommandHandlerLambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: !Ref SuccessResponse
        - StatusCode: '400'
          ResponseModels:
            application/json: !Ref ErrorResponse
        - StatusCode: '500'
          ResponseModels:
            application/json: !Ref ErrorResponse

  CommandHandlerLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CommandHandlerLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: ${self:provider.stage}環境向けデプロイメント

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: ${self:provider.stage}
      Description: ${self:provider.stage}環境
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          DataTraceEnabled: true

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ApiGatewayStage
    Properties:
      UsagePlanName: ${self:service}-${self:provider.stage}-usage-plan
      Description: 介護ARグラス用APIの使用制限
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: ${self:provider.stage}
      Throttle:
        BurstLimit: 100
        RateLimit: 50
      Quota:
        Limit: 10000
        Period: DAY

Outputs:
  ApiGatewayRestApiId:
    Value: !Ref ApiGatewayRestApi

  ApiGatewayRootResourceId:
    Value: !GetAtt ApiGatewayRestApi.RootResourceId

  ApiEndpoint:
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
